/*
Copyright (c) Facebook, Inc. and its affiliates.

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/

// Format this file with clang after editing:
//   clang-format-8 conf/*.proto -i
syntax = "proto2";
package fairdiplomacy;

import public "conf/common.proto";

message RandomAgent {}

message ModelSampledAgent {
  // Required. Path to checkpoint.
  optional string model_path = 1;

  // Required. Softmax temperature
  optional float temperature = 2;

  // Optional. Share of probability mass to keep for sampling.
  optional float top_p = 3 [ default = 1.0 ];

  // Optional. Use FP16 at inference time for everything.
  optional bool half_precision = 5 [ default = false ];
}

message ModelRollouts {
  optional uint32 n_threads = 1 [ default = 70 ];

  // Temperature used for rollouts
  optional float temperature = 2 [ default = 1.0 ];

  // Nucleus ratio used for rollouts. During nucleus sampling only
  // the smallest subset of actions that has probability at least top_p is
  // considered. All other actions are never sampled.
  optional float top_p = 3 [ default = 1.0 ];

  // Maximum rollout length in MOVEMENT PHASES heuristically evaluating the game
  optional int32 max_rollout_length = 4 [ default = -1 ];

  // # of rollouts to run in parallel for each possible action
  optional uint32 average_n_rollouts = 5 [ default = 1 ];

  // Optional float 0 - 1 to mix in raw sum of squares ratio
  optional float mix_square_ratio_scoring = 6 [ default = 0 ];

  // Optional. Enables optimization on clonning dipcc.Game objects.
  optional bool clear_old_all_possible_orders = 7 [ default = false ];
}

message PlausibleOrderSampling {
  // Number of order-sets (actions) to consider at each step in search code
  optional uint32 n_plausible_orders = 1;
  // Optional, limit number of actions to consider as a ratio of # units
  // # plausible actions = min(ceil(max_actions_units_ratio * #units),
  // n_plausible_orders)
  optional float max_actions_units_ratio = 2 [ default = -1 ];

  // Optional. Excludes all-hold orders of length >=N from plausible orders.
  optional int32 exclude_n_holds = 3 [ default = -1 ];

  optional uint32 req_size = 4 [ default = 700 ];

  // Optional. Batch size for sample queries.
  // If not set, will equal to req_size.
  optional uint32 batch_size = 5 [ default = 0 ];
};

message DoubleOracleExploration {
  // Required. How many iterations to do. Use at least as many as powers you
  // have.
  optional int32 max_iters = 1;
  // Optional. Min EV diff to choose a new action over existing one.
  optional float min_diff = 2 [ default = 0.0 ];

  // Optional. Min EV relative diff in percentage. Must be in [1.0, 100].
  optional float min_diff_percentage = 8 [ default = 0.0 ];

  // Optional. Maximum number of opponent actions to consider for EV
  // computation. If not set, will be infinite.
  optional int32 max_op_actions = 4;

  // Optional. If set, a couple of games will be considered identical if the
  // final board state is the same. This flag should be relatively save for 2p
  // games.
  optional bool use_board_state_hashing = 5;

  // Optional. If set, will try to make for each power in random order rather
  // than in lexiographic order aka in order of POWERS list.
  optional bool shuffle_powers = 6;

  // Optional. If set, will regenerate the set of orders after each DO
  // iteration. Otherwise will generate set of orders once.
  optional bool regenerate_every_iter = 7;

  message Generation {
    // Required. How many random actions to sample at each iteration.
    optional int32 max_actions = 1;

    message UniformGenerator {
      // Optional. Consider orders that support foreign units.
      optional bool allow_foreign_supports = 1 [ default = true ];
    }

    message ColumnGenerator {
      // Optional. If set, will use this model instead of one in the agent.
      optional string model_path = 1;
      // Optional. Consider orders that support foreign units.
      optional float temperature = 2 [ default = 1.0 ];
    }

    message ModelGenerator {
      // Optional. If set, will use this model instead of one in the agent.
      optional string model_path = 1;
      // Optional. Consider orders that support foreign units.
      optional float temperature = 2 [ default = 1.0 ];
      // Optional. Prediction order: default or random.
      optional string location_order = 3 [ default = "default" ];
    }

    message LocalUniformGenerator {
      // Required. How many action to take from the policy and try to
      // modify.
      optional int32 num_base_actions = 1;
      // Optional. If set, will sample actions from the policy. Otherwise
      // will take top actions (default).
      optional bool use_sampling = 2;
      // Optional. Whether to use blueprint policy (default) or search policy to
      // select base actions.
      optional bool use_search_policy = 3;
      // Optional. Replace supports with hold in the base action, if the action
      // is not coordinated.
      optional bool fix_uncoordinated_base = 4;
      // Optional. If set, will search not only over locations adjancent to
      // existing units, but over all locations. In other words, this will group
      // units by points of influence.
      optional bool with_holes = 5;
    }

    oneof maybe_uniform { UniformGenerator uniform = 2; }

    oneof maybe_column { ColumnGenerator column = 3; }

    oneof maybe_model { ModelGenerator model = 4; }

    oneof maybe_local_uniform { LocalUniformGenerator local_uniform = 5; }
  }

  optional Generation generation = 3;
}

message SearchBotAgent {
  // Path to checkpoint.
  optional string model_path = 1;

  // Number of postman server processes to launch
  optional uint32 n_server_procs = 3;

  // Distribute server processes over multiple GPUs
  optional uint32 n_gpu = 4;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5 [ default = 700 ];

  // Number of CFR iterations
  optional int32 n_rollouts = 6 [ default = -1 ];

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // If true, set postman batch size and use wait_till_full
  optional bool postman_sync_batches = 11;

  // Optional host:port for model server
  optional string use_server_addr = 12;

  // CUDA device to use, if > 0
  optional int32 device = 13 [ default = 0 ];

  // Optional, if True, sample from final iter instead of average iter
  optional bool use_final_iter = 18 [ default = true ];

  // Optional: separate model path to compute the value function
  optional string value_model_path = 19;

  // Optional host:port for value model server
  optional string use_value_server_addr = 20;

  // Optional, if True, prune actions after 1/4 of the number of iters
  optional bool use_pruning = 22 [ default = false ];

  // Optional, if >0 then play BP strategy for this many iters
  optional int32 bp_iters = 23 [ default = 0 ];

  // Optional, if >0 then play BP strategy for this many iters
  optional float bp_prob = 24 [ default = 0 ];

  // Optional, if >0, then at each rollout step will use the current
  // model-predicted value as this fraction of the final estimate
  // (i.e. exponentially decaying effect of rollouts of increasing length)
  optional float rollout_value_frac = 25 [ default = 0 ];

  optional bool cache_rollout_results = 26 [ default = false ];

  // Optional. If set, will compute cache for the all possible joint actions
  // before running CFR. The procomputation will be skippef if have more than 2
  // alive powers.
  optional bool precompute_cache = 43 [ default = false ];

  // Debugging for situation check tests only
  // Use the seed for plausible actions, then pick a random seed for rollouts
  optional bool reset_seed_on_rollout = 27 [ default = false ];

  // If this power is a loser, i.e. its action values are less
  // than this value, then this power plays blueprint.
  optional float loser_bp_value = 28 [ default = 0 ];

  // First CFR iteration to start following loser_bp_value
  // (we need a few iterations to accurately estimate the action values)
  optional float loser_bp_iter = 29 [ default = 64 ];

  // Optional. If set and a call to compute strategy for several agents is done
  // (e.g., in compare agents), then CFR is run only once.
  optional bool share_strategy = 31 [ default = false ];

  // If true, then exploitability is calculated at regular intervals.
  optional bool enable_compute_nash_conv = 32 [ default = false ];

  // Optional. If set, then the model will do less iterations if worked more
  // than this number of seconds.
  optional int32 max_seconds = 37 [ default = 0 ];

  // Optional. By default, use optimistic cfr
  optional bool use_optimistic_cfr = 38 [ default = true ];

  // Rollout parameters
  optional ModelRollouts rollouts_cfg = 39;

  message PlausibleOrderAugmentation {
    message RandomExploration {
      // Optional. How many top plausible orders always to keep. Has priority
      // over max_actions_to_drop.
      optional int32 min_actions_to_keep = 1 [ default = 0 ];
      // Optional. Make sure we replace at least this number of orders.
      optional int32 max_actions_to_drop = 2 [ default = 0 ];
    }

    oneof augmentation_type {
      // Fills plausible orders up to limit with random diverse actions.
      RandomExploration random = 1;
      // Iteratively tries to find actions that has higher EV from a pool of
      // random actions.
      DoubleOracleExploration do = 2;
    }
  }
  // Defines plausible order agumentation.
  optional PlausibleOrderAugmentation order_aug = 40;

  optional PlausibleOrderSampling plausible_orders_cfg = 41;

  // Optional. Use FP16 at inference time for everything.
  optional bool half_precision = 44 [ default = false ];
}

message BRSearchAgent {
  // Path to checkpoint.
  optional string model_path = 1;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5 [ default = 700 ];

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // CUDA device to use
  optional int32 device = 13 [ default = 0 ];

  // Optional: separate model path to compute the value function
  optional string value_model_path = 14;

  // Rollout params
  optional ModelRollouts rollouts_cfg = 15;

  optional PlausibleOrderSampling plausible_orders_cfg = 16;
}

message CE1PAgent {
  // Path to checkpoint.
  optional string model_path = 1;

  // Size of rollout process pool
  optional uint32 n_rollout_procs = 2 [ default = 70 ];

  // Number of postman server processes to launch
  optional uint32 n_server_procs = 3;

  // Distribute server processes over multiple GPUs
  optional uint32 n_gpu = 4;

  // Model server maximum batch size
  optional uint32 max_batch_size = 5 [ default = 700 ];

  // Number of CFR iterations
  optional int32 n_rollouts = 6 [ default = -1 ];

  // Maximum rollout length in MOVEMENT PHASES heuristically evaluating the game
  optional int32 max_rollout_length = 7 [ default = -1 ];

  // If true, use model predicted final scores in heuristic evalauation
  // If false, use current SC counts after max_rollout_length steps
  optional bool use_predicted_final_scores = 8;

  // Number of order-sets (actions) to consider at each step in search code
  optional int32 n_plausible_orders = 9 [ default = -1 ];

  // Temperature used for rollouts
  optional float rollout_temperature = 10 [ default = -1 ];
}

message ReproAgent {
  // Required, path to game.json file
  optional string game_path = 1;
}

message Agent {
  repeated Include includes = 100;
  oneof agent {
    RandomAgent random = 2;
    ModelSampledAgent model_sampled = 3;
    SearchBotAgent searchbot = 4;
    BRSearchAgent br_search = 5;
    CE1PAgent ce1p = 6;
    ReproAgent repro = 7;
  }
}
